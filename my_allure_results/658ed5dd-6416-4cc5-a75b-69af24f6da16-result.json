{"name": "test_screenplay2", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=126.0.6478.55)\nStacktrace:\n\tGetHandleVerifier [0x00007FF684383E62+31618]\n\t(No symbol) [0x00007FF6842FB0C9]\n\t(No symbol) [0x00007FF6841B86B9]\n\t(No symbol) [0x00007FF6842098B2]\n\t(No symbol) [0x00007FF6841FC281]\n\t(No symbol) [0x00007FF68422D10A]\n\t(No symbol) [0x00007FF6841FBBA6]\n\t(No symbol) [0x00007FF68422D320]\n\t(No symbol) [0x00007FF68424CA80]\n\t(No symbol) [0x00007FF68422CEB3]\n\t(No symbol) [0x00007FF6841FA46B]\n\t(No symbol) [0x00007FF6841FB001]\n\tGetHandleVerifier [0x00007FF68468A03D+3202397]\n\tGetHandleVerifier [0x00007FF6846D6A5D+3516285]\n\tGetHandleVerifier [0x00007FF6846CC4D0+3473904]\n\tGetHandleVerifier [0x00007FF684435D66+760454]\n\t(No symbol) [0x00007FF684306B6F]\n\t(No symbol) [0x00007FF684301D04]\n\t(No symbol) [0x00007FF684301E92]\n\t(No symbol) [0x00007FF6842F123F]\n\tBaseThreadInitThunk [0x00007FFD5A1C7034+20]\n\tRtlUserThreadStart [0x00007FFD5BF226A1+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b99e3950bd4a28677aef02f43efef036\")>\n\n    def test_screenplay2(browser):\n        browser.get(URL_SBIS)\n        main_sbis_page = MainSbisPage(browser)\n    \n        contacts = main_sbis_page.find_contacts_sbis_page()\n    \n        assert contacts.text == 'Контакты', 'Unexpected text'\n    \n        main_sbis_page.go_to_contacts_sbis_page()\n    \n        contacts_sbis_page = ContactsSbisPage(browser)\n        curent_region_field = contacts_sbis_page.find_current_region_field()\n        curent_region_field_text = curent_region_field.text\n        partners_list_title_1 = contacts_sbis_page.get_title_partners_list_current_region()\n    \n        assert curent_region_field_text == 'Краснодарский край', 'Unexpected title'\n    \n        _switch_to_another_handler(browser)\n    \n        partners_list = contacts_sbis_page.find_partners_list()\n    \n        assert partners_list.is_displayed() == True, 'Unexpected text'\n    \n        contacts_sbis_page.go_to_modal_window_of_regions()\n    \n        _switch_to_another_handler(browser)\n    \n        region = contacts_sbis_page.find_region()\n        region_text = region.text\n    \n        assert region_text == '41 Камчатский край', 'Unexpected title'\n    \n        contacts_sbis_page.go_to_region()\n    \n        _switch_to_another_handler(browser)\n    \n        new_curent_region = contacts_sbis_page.find_current_region_field()\n        new_curent_region.click()\n        new_curent_region_field = new_curent_region\n        new_curent_region_field_text = new_curent_region_field.text\n        partners_list_title_2 = contacts_sbis_page.get_title_partners_list_current_region()\n    \n        assert new_curent_region_field_text == 'Камчатский край', 'Unexpected title'\n    \n        assert partners_list_title_1 != partners_list_title_2, 'Unexpected title'\n    \n        curl = get_url(browser)\n    \n        res = _is_kamchatskiy_kraj(curl)\n    \n        assert res == True, 'Unexpected title'\n    \n>       head_title_text = contacts_sbis_page.get_text_head_title()\n\ntests\\test_refactored2.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\contacts_sbis_page.py:38: in get_text_head_title\n    head_title_text.click()\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F327867670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6842F123F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD5A1C7034+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD5BF226A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=126.0.6478.55)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF684383E62+31618]\nE       \t(No symbol) [0x00007FF6842FB0C9]\nE       \t(No symbol) [0x00007FF6841B86B9]\nE       \t(No symbol) [0x00007FF6842098B2]\nE       \t(No symbol) [0x00007FF6841FC281]\nE       \t(No symbol) [0x00007FF68422D10A]\nE       \t(No symbol) [0x00007FF6841FBBA6]\nE       \t(No symbol) [0x00007FF68422D320]\nE       \t(No symbol) [0x00007FF68424CA80]\nE       \t(No symbol) [0x00007FF68422CEB3]\nE       \t(No symbol) [0x00007FF6841FA46B]\nE       \t(No symbol) [0x00007FF6841FB001]\nE       \tGetHandleVerifier [0x00007FF68468A03D+3202397]\nE       \tGetHandleVerifier [0x00007FF6846D6A5D+3516285]\nE       \tGetHandleVerifier [0x00007FF6846CC4D0+3473904]\nE       \tGetHandleVerifier [0x00007FF684435D66+760454]\nE       \t(No symbol) [0x00007FF684306B6F]\nE       \t(No symbol) [0x00007FF684301D04]\nE       \t(No symbol) [0x00007FF684301E92]\nE       \t(No symbol) [0x00007FF6842F123F]\nE       \tBaseThreadInitThunk [0x00007FFD5A1C7034+20]\nE       \tRtlUserThreadStart [0x00007FFD5BF226A1+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "start": 1718233175050, "stop": 1718233181528, "uuid": "328461cf-cbf0-49a7-9b33-e66dcc0c7447", "historyId": "d5e9f6900117bc144e09266c013cd06c", "testCaseId": "d5e9f6900117bc144e09266c013cd06c", "fullName": "tests.test_refactored2#test_screenplay2", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_refactored2"}, {"name": "host", "value": "ar"}, {"name": "thread", "value": "15568-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_refactored2"}]}