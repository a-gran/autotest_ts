{"name": "test_banner", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/about\" class=\"tensor_ru-link tensor_ru-Index__link\">...</a> is not clickable at point (475, 1061). Other element would receive the click: <noindex>...</noindex>\n  (Session info: chrome=126.0.6478.55)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6764D3E62+31618]\n\t(No symbol) [0x00007FF67644B0C9]\n\t(No symbol) [0x00007FF67630888A]\n\t(No symbol) [0x00007FF67636022E]\n\t(No symbol) [0x00007FF67635DBE2]\n\t(No symbol) [0x00007FF67635B07B]\n\t(No symbol) [0x00007FF67635A246]\n\t(No symbol) [0x00007FF67634C281]\n\t(No symbol) [0x00007FF67637D10A]\n\t(No symbol) [0x00007FF67634BBA6]\n\t(No symbol) [0x00007FF67637D320]\n\t(No symbol) [0x00007FF67639CA80]\n\t(No symbol) [0x00007FF67637CEB3]\n\t(No symbol) [0x00007FF67634A46B]\n\t(No symbol) [0x00007FF67634B001]\n\tGetHandleVerifier [0x00007FF6767DA03D+3202397]\n\tGetHandleVerifier [0x00007FF676826A5D+3516285]\n\tGetHandleVerifier [0x00007FF67681C4D0+3473904]\n\tGetHandleVerifier [0x00007FF676585D66+760454]\n\t(No symbol) [0x00007FF676456B6F]\n\t(No symbol) [0x00007FF676451D04]\n\t(No symbol) [0x00007FF676451E92]\n\t(No symbol) [0x00007FF67644123F]\n\tBaseThreadInitThunk [0x00007FFA2BC87034+20]\n\tRtlUserThreadStart [0x00007FFA2D0426A1+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"84b6f681ec71ec994a2ccca63d8660a5\")>\n\n    def test_banner(browser):\n        browser.get(URL)\n        original_page_handler = browser.current_window_handle\n        contacts = browser.find_element(By.CSS_SELECTOR, 'a[href=\"/contacts\"].sbisru-Header__menu-link')\n    \n        assert contacts.text == 'Контакты', 'Unexpected text'\n    \n        contacts.click()\n    \n        tensor_banner = browser.find_element(By.XPATH, '//*[@id=\"contacts_clients\"]/div[1]/div/div/div[2]/div/a')\n        tensor_banner_title = tensor_banner.get_attribute('title')\n    \n        assert tensor_banner_title == 'tensor.ru', 'Unexpected title'\n    \n        tensor_banner.click()\n    \n        _switch_to_another_handler(browser, original_page_handler)\n    \n        browser.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n        people_power = browser.find_element(By.XPATH, '//*[@id=\"container\"]/div[1]/div/div[5]/div/div/div[1]/div/p[1]')\n    \n        assert people_power.text == 'Сила в людях', 'Unexpected text'\n    \n        more = browser.find_element(By.CSS_SELECTOR, 'a[href=\"/about\"].tensor_ru-link')\n    \n        assert more.text == 'Подробнее', 'Unexpected link text'\n    \n>       more.click()\n\ntests\\test_screenplays.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000237B0E049A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF67644123F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA2BC87034+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA2D0426A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/about\" class=\"tensor_ru-link tensor_ru-Index__link\">...</a> is not clickable at point (475, 1061). Other element would receive the click: <noindex>...</noindex>\nE         (Session info: chrome=126.0.6478.55)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6764D3E62+31618]\nE       \t(No symbol) [0x00007FF67644B0C9]\nE       \t(No symbol) [0x00007FF67630888A]\nE       \t(No symbol) [0x00007FF67636022E]\nE       \t(No symbol) [0x00007FF67635DBE2]\nE       \t(No symbol) [0x00007FF67635B07B]\nE       \t(No symbol) [0x00007FF67635A246]\nE       \t(No symbol) [0x00007FF67634C281]\nE       \t(No symbol) [0x00007FF67637D10A]\nE       \t(No symbol) [0x00007FF67634BBA6]\nE       \t(No symbol) [0x00007FF67637D320]\nE       \t(No symbol) [0x00007FF67639CA80]\nE       \t(No symbol) [0x00007FF67637CEB3]\nE       \t(No symbol) [0x00007FF67634A46B]\nE       \t(No symbol) [0x00007FF67634B001]\nE       \tGetHandleVerifier [0x00007FF6767DA03D+3202397]\nE       \tGetHandleVerifier [0x00007FF676826A5D+3516285]\nE       \tGetHandleVerifier [0x00007FF67681C4D0+3473904]\nE       \tGetHandleVerifier [0x00007FF676585D66+760454]\nE       \t(No symbol) [0x00007FF676456B6F]\nE       \t(No symbol) [0x00007FF676451D04]\nE       \t(No symbol) [0x00007FF676451E92]\nE       \t(No symbol) [0x00007FF67644123F]\nE       \tBaseThreadInitThunk [0x00007FFA2BC87034+20]\nE       \tRtlUserThreadStart [0x00007FFA2D0426A1+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1718160377779, "stop": 1718160387634, "uuid": "86e29239-da0e-4c61-af04-28ba27d5ccbb", "historyId": "78d090bad11169d82e10ca050619fc7a", "testCaseId": "78d090bad11169d82e10ca050619fc7a", "fullName": "tests.test_screenplays#test_banner", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_screenplays"}, {"name": "host", "value": "ar"}, {"name": "thread", "value": "15612-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_screenplays"}]}